* current_app
->    is another special object that points to the Flask application handling the request. Since you used an
    application factory, there is no application object when writing the rest of your code. get_db will be called when
    the application has been created and is handling a request, so current_app can be used.


* sqlite3.connect()
->    establishes a connection to the file pointed at by the DATABASE configuration key. This file doesn’t have to exist yet,
    and won’t until you initialize the database later.


* sqlite3.Row
->    tells the connection to return rows that behave like dicts. This allows accessing the columns by name.


* close_db
->     checks if a connection was created by checking if g.db was set. If the connection exists, it is closed.
     Further down you will tell your application about the close_db function in the application factory so that
     it is called after each request.

* open_resource()
->    opens a file relative to the flaskr package, which is useful since you won’t necessarily know where that location is
    when deploying the application later. get_db returns a database connection, which is used to execute the commands
    read from the file.

* click.command()
->    defines a command line command called init-db that calls the init_db function and shows a
    success message to the user. You can read Command Line Interface[1] to learn more about writing commands.

    Command Line Interface [https://flask.palletsprojects.com/en/2.2.x/cli/]


* app.teardown_appcontext()
->    tells Flask to call that function when cleaning up after returning the response.


* app.cli.add_command()
->    adds a new command that can be called with the flask command.


$ flask --app flaskr init-db
    -> Inicia o db pelo comando flask