Source: https://flask.palletsprojects.com/en/2.2.x/tutorial/layout/

0 Project Layout¶


1 Application Setup¶

    A Flask application is an instance of the Flask class. Everything about the application, such as configuration
    and URLs, will be registered with this class.

    The most straightforward way to create a Flask application is to create a global Flask instance directly at the
    top of your code, like how the “Hello, World!” example did on the previous page. While this is simple and useful
    in some cases, it can cause some tricky issues as the project grows.

    Instead of creating a Flask instance globally, you will create it inside a function. This function is known as
    the application factory. Any configuration, registration, and other setup the application needs will happen inside
    the function, then the application will be returned.

        1 __init__.py   [flaskr/]
            -> The Application Factory¶


2 Define and Access the Database¶

        2.1 db.py   [flaskr/]
            -> Connect to the Database¶

        2.2 schema.sql   [flaskr/]
            -> Create the Tables¶

        2.3 db.py   [flaskr/]
            -> Register with the Application¶

        2.4 __init__.py   [flaskr/]
            -> Initialize the Database File¶


3 Blueprints and Views¶

    A view function is the code you write to respond to requests to your application. Flask uses patterns to match the
    incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing
    response. Flask can also go the other direction and generate a URL to a view based on its name and arguments.

    A Blueprint is a way to organize a group of related views and other code. Rather than registering views and other
    code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the
    application when it is available in the factory function.

        3.1 auth.py   [flaskr/]
            -> Create a Blueprint¶

        3.2 __init__.py   [flaskr/]
            -> Import and register the blueprint from the factory using app.register_blueprint().
               Place the new code at the end of the factory function before returning the app.

        3.3 auth.py   [flaskr/]
            -> The First View: Register¶    {@bp}

        3.4 auth.py   [flaskr/]
            -> Login¶    {@bp}

        3.5 auth.py   [flaskr/]
            -> @bp.before_app_request

        3.6 auth.py   [flaskr/]
            -> Logout¶    {@bp}

        3.7 auth.py   [flaskr/]
            -> Require Authentication in Other Views¶    {@bp}

    Endpoints and URLs¶

        The url_for() function generates the URL to a view based on a name and arguments. The name associated with a
        view is also called the endpoint, and by default it’s the same as the name of the view function.

        For example, the hello() view that was added to the app factory earlier in the tutorial has the name 'hello'
        and can be linked to with url_for('hello'). If it took an argument, which you’ll see later, it would be linked
        to using url_for('hello', who='World').

        When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for
        the login function you wrote above is 'auth.login' because you added it to the 'auth' blueprint.


4 Templates¶

    You’ve written the authentication views for your application, but if you’re running the server and try to go to any
    of the URLs, you’ll see a TemplateNotFound error. That’s because the views are calling render_template(), but you
    haven’t written the templates yet. The template files will be stored in the templates directory inside the flaskr
    package.

    Templates are files that contain static data as well as placeholders for dynamic data. A template is rendered with
    specific data to produce a final document. Flask uses the Jinja template library to render templates.

    In your application, you will use templates to render HTML which will display in the user’s browser.
    In Flask, Jinja is configured to autoescape any data that is rendered in HTML templates. This means that it’s safe to
    render user input; any characters they’ve entered that could mess with the HTML, such as < and > will be escaped
    with safe values that look the same in the browser but don’t cause unwanted effects.

    Jinja looks and behaves mostly like Python. Special delimiters are used to distinguish Jinja syntax from the static
    data in the template. Anything between {{ and }} is an expression that will be output to the final document.
    {% and %} denotes a control flow statement like if and for. Unlike Python, blocks are denoted by start and end tags
    rather than indentation since static text within a block could change indentation.

        4.1 base.html   [flaskr/templates/]
            -> The Base Layout¶
